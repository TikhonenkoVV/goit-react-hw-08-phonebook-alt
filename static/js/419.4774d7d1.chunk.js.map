{"version":3,"file":"static/js/419.4774d7d1.chunk.js","mappings":"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","sources":["components/SignInForm/SignInForm.styled.jsx","services/validate-schema-login.js","components/SignInForm/SignInForm.jsx","components/SignUpForm/SignUpForm.styled.jsx","components/SignUpForm/SignUpForm.jsx","Pages/Auth.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const FormikForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    width: 100%px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: ${props => props.theme.fontSizes.medium};\n    transition: color 250ms;\n    & svg {\n        transition: fill 250ms;\n    }\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n    &:hover svg,\n    &:focus svg {\n        fill: ${props => props.theme.colors.hover};\n    }\n\n    &:nth-of-type(2) {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n`;\n\nexport const Ico = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #404040;\n    width: 33px;\n    height: 33px;\n    padding: 5px;\n`;\n\nexport const Input = styled(Field)`\n    flex-grow: 1;\n    display: block;\n    margin: 0;\n    padding: 5px 33px 5px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    font-size: 18px;\n`;\n\nexport const SubmitButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    height: 40px;\n    border-radius: 4px;\n    font-size: 18px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const Message = styled.span`\n    font-size: ${props => props.theme.fontSizes.small};\n`;\n","import * as yup from 'yup';\n\nexport const SchemaLogin = yup.object().shape({\n    email: yup\n        .string()\n        .matches(/^([A-Z0-9._%+-]{4,})+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, {\n            message: 'Invalid email address',\n            test: value => {\n                return /^([A-Z0-9._%+-]{4,})+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(\n                    value\n                );\n            },\n        })\n        .required('Invalid email address'),\n    password: yup\n        .string()\n        .matches(/^[A-Z0-9!@#$%^&*]{8,16}$/i, {\n            message:\n                'The password must consist only of Latin letters, numbers and special characters. The length of the password is from 8 to 16',\n            test: value => {\n                return /^[A-Z0-9!@#$%^&*]{8,16}$/i.test(value);\n            },\n        })\n        .required(\n            'The password must consist only of Latin letters, numbers and special characters. The length of the password is from 8 to 16'\n        ),\n});\n\nexport const validationSchemaLogin = yup.object().shape({\n    name: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        )\n        .required(\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        ),\n    email: yup\n        .string()\n        .matches(/^([A-Z0-9._%+-]{4,})+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, {\n            message: 'Invalid email address',\n            test: value => {\n                return /^([A-Z0-9._%+-]{4,})+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(\n                    value\n                );\n            },\n        })\n        .required('Invalid email address'),\n    password: yup\n        .string()\n        .matches(/^[A-Z0-9!@#$%^&*]{8,16}$/i, {\n            message:\n                'The password must consist only of Latin letters, numbers and special characters. The length of the password is from 8 to 16',\n            test: value => {\n                return /^[A-Z0-9!@#$%^&*]{8,16}$/i.test(value);\n            },\n        })\n        .required(\n            'The password must consist only of Latin letters, numbers and special characters. The length of the password is from 8 to 16'\n        ),\n});\n","import { Svg } from 'components/icon/Icon';\nimport {\n    FormikForm,\n    Ico,\n    Input,\n    InputWrapper,\n    Label,\n    Message,\n    SubmitButton,\n} from './SignInForm.styled';\nimport { ErrorMessage, Formik } from 'formik';\nimport { SchemaLogin } from 'services/validate-schema-login';\nimport sprite from '../../img/icons.svg';\nimport { useDispatch } from 'react-redux';\nimport { hendleSignIn } from 'store/auth/authOperations';\n\nexport const SignInForm = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <Formik\n            validationSchema={SchemaLogin}\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            onSubmit={(values, { resetForm }) => {\n                dispatch(hendleSignIn(values));\n                resetForm();\n            }}\n        >\n            {({ handleSubmit, handleChange }) => {\n                return (\n                    <>\n                        <FormikForm onSubmit={handleSubmit}>\n                            <Label>\n                                E-mail\n                                <InputWrapper>\n                                    <Ico>\n                                        <Svg\n                                            w={23}\n                                            h={23}\n                                            use={`${sprite}#icon-email`}\n                                        />\n                                    </Ico>\n                                    <Input\n                                        type=\"email\"\n                                        name=\"email\"\n                                        placeholder=\"Enter e-mail\"\n                                        onChange={handleChange}\n                                    />\n                                </InputWrapper>\n                                <ErrorMessage name=\"email\">\n                                    {msg => <Message>{msg}</Message>}\n                                </ErrorMessage>\n                            </Label>\n                            <Label>\n                                Password\n                                <InputWrapper>\n                                    <Ico>\n                                        <Svg\n                                            w={20}\n                                            h={20}\n                                            use={`${sprite}#icon-key`}\n                                        />\n                                    </Ico>\n                                    <Input\n                                        type=\"password\"\n                                        name=\"password\"\n                                        placeholder=\"Enter password\"\n                                        onChange={handleChange}\n                                    />\n                                </InputWrapper>\n                                <ErrorMessage name=\"password\">\n                                    {msg => <Message>{msg}</Message>}\n                                </ErrorMessage>\n                            </Label>\n                            <SubmitButton type=\"submit\">\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-save-contact`}\n                                />\n                                Sign In\n                            </SubmitButton>\n                        </FormikForm>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n};\n","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const FormikForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    max-width: 360px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: ${props => props.theme.fontSizes.medium};\n    transition: color 250ms;\n    & svg {\n        transition: fill 250ms;\n    }\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n    &:hover svg,\n    &:focus svg {\n        fill: ${props => props.theme.colors.hover};\n    }\n\n    &:nth-of-type(3) {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n`;\n\nexport const Ico = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #404040;\n    width: 33px;\n    height: 33px;\n    padding: 5px;\n`;\n\nexport const Input = styled(Field)`\n    flex-grow: 1;\n    display: block;\n    margin: 0;\n    padding: 5px 33px 5px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    font-size: 18px;\n`;\n\nexport const SubmitButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    height: 40px;\n    border-radius: 4px;\n    font-size: 18px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const Message = styled.span`\n    font-size: ${props => props.theme.fontSizes.small};\n`;\n","import { Svg } from 'components/icon/Icon';\nimport {\n    FormikForm,\n    Ico,\n    Input,\n    InputWrapper,\n    Label,\n    Message,\n    SubmitButton,\n} from './SignUpForm.styled';\nimport { ErrorMessage, Formik } from 'formik';\nimport { validationSchemaLogin } from 'services/validate-schema-login';\nimport sprite from '../../img/icons.svg';\nimport { useDispatch } from 'react-redux';\nimport { hendleSignUp } from 'store/auth/authOperations';\n\nexport const SignUpForm = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <Formik\n            validationSchema={validationSchemaLogin}\n            initialValues={{\n                name: '',\n                email: '',\n                password: '',\n            }}\n            onSubmit={(values, { resetForm }) => {\n                dispatch(hendleSignUp(values));\n                resetForm();\n            }}\n        >\n            {({ handleSubmit, handleChange }) => {\n                return (\n                    <FormikForm onSubmit={handleSubmit}>\n                        <Label>\n                            Name\n                            <InputWrapper>\n                                <Ico>\n                                    <Svg\n                                        w={23}\n                                        h={23}\n                                        use={`${sprite}#icon-contact`}\n                                    />\n                                </Ico>\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    placeholder=\"Enter name\"\n                                    onChange={handleChange}\n                                />\n                            </InputWrapper>\n                            <ErrorMessage name=\"name\">\n                                {msg => <Message>{msg}</Message>}\n                            </ErrorMessage>\n                        </Label>\n                        <Label>\n                            E-mail\n                            <InputWrapper>\n                                <Ico>\n                                    <Svg\n                                        w={23}\n                                        h={23}\n                                        use={`${sprite}#icon-email`}\n                                    />\n                                </Ico>\n                                <Input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\"Enter e-mail\"\n                                    onChange={handleChange}\n                                />\n                            </InputWrapper>\n                            <ErrorMessage name=\"email\">\n                                {msg => <Message>{msg}</Message>}\n                            </ErrorMessage>\n                        </Label>\n                        <Label>\n                            Password\n                            <InputWrapper>\n                                <Ico>\n                                    <Svg\n                                        w={20}\n                                        h={20}\n                                        use={`${sprite}#icon-key`}\n                                    />\n                                </Ico>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    placeholder=\"Enter password\"\n                                    onChange={handleChange}\n                                />\n                            </InputWrapper>\n                            <ErrorMessage name=\"password\">\n                                {msg => <Message>{msg}</Message>}\n                            </ErrorMessage>\n                        </Label>\n                        <SubmitButton type=\"submit\">\n                            <Svg\n                                w={20}\n                                h={20}\n                                use={`${sprite}#icon-save-contact`}\n                            />\n                            Sign Up\n                        </SubmitButton>\n                    </FormikForm>\n                );\n            }}\n        </Formik>\n    );\n};\n","import {\n    AuthWrapper,\n    Button,\n    Container,\n    FormBox,\n    FormNav,\n    FormWrapper,\n    Section,\n} from 'components/App.styled';\nimport { SignInForm } from 'components/SignInForm/SignInForm';\nimport { SignUpForm } from 'components/SignUpForm/SignUpForm';\nimport { useRef } from 'react';\n\nconst SignUp = () => {\n    const BtnSignIn = useRef();\n    const BtnSignUp = useRef();\n    const FormWrapperRef = useRef();\n\n    const hendleClick = e => {\n        if (e.target.classList.contains('active')) return;\n        BtnSignIn.current.classList.toggle('active');\n        BtnSignUp.current.classList.toggle('active');\n        FormWrapperRef.current.classList.toggle('toright');\n    };\n\n    return (\n        <Section>\n            <Container>\n                <AuthWrapper>\n                    <FormNav>\n                        <Button\n                            ref={BtnSignIn}\n                            onClick={hendleClick}\n                            className=\"active\"\n                        >\n                            Sign in\n                        </Button>\n                        <Button ref={BtnSignUp} onClick={hendleClick}>\n                            Sign up\n                        </Button>\n                    </FormNav>\n                    <FormWrapper ref={FormWrapperRef}>\n                        <FormBox>\n                            <SignInForm />\n                        </FormBox>\n                        <FormBox>\n                            <SignUpForm />\n                        </FormBox>\n                    </FormWrapper>\n                </AuthWrapper>\n            </Container>\n        </Section>\n    );\n};\n\nexport default SignUp;\n"],"names":["FormikForm","styled","Form","Label","props","theme","fontSizes","medium","colors","hover","InputWrapper","Ico","Input","Field","SubmitButton","btn","Message","small","SchemaLogin","yup","shape","email","matches","message","test","value","required","password","validationSchemaLogin","name","nullable","transform","startValue","trim","SignInForm","dispatch","useDispatch","validationSchema","initialValues","onSubmit","values","resetForm","hendleSignIn","handleSubmit","handleChange","w","h","use","sprite","type","placeholder","onChange","msg","SignUpForm","hendleSignUp","BtnSignIn","useRef","BtnSignUp","FormWrapperRef","hendleClick","e","target","classList","contains","current","toggle","ref","onClick","className"],"sourceRoot":""}