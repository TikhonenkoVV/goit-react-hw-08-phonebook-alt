{"version":3,"file":"static/js/502.d9ba42af.chunk.js","mappings":"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","sources":["components/Contact-form/ContactForm.styled.jsx","services/validate-schema.js","components/FormItem/FormItem.styled.jsx","components/FormItem/FormItem.jsx","services/tocapitalize.js","components/Contact-form/ContactForm.jsx","Pages/New.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { LinkStyled } from 'components/App.styled';\nimport { Form } from 'formik';\n\nexport const FormikForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    max-width: 400px;\n    padding-bottom: 30px;\n`;\n\nexport const BtnClose = styled(LinkStyled)`\n    position: absolute;\n    top: 0px;\n    left: 0;\n`;\n\nexport const PhotoLabel = styled.label`\n    position: relative;\n    display: block;\n    width: 150px;\n    margin: 0 auto;\n    aspect-ratio: 1;\n    border-radius: 50%;\n    background-color: #302b2b;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    background-image: url('${props => props.file}');\n    cursor: pointer;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n\nexport const IconEdit = styled.div`\n    position: absolute;\n    bottom: -3px;\n    right: -3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: ${props => props.theme.colors.mainBackground};\n    transition: color 250ms;\n`;\n\nexport const SubmitButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    height: 40px;\n    border-radius: 4px;\n    font-size: 18px;\n    background-color: ${props => props.theme.colors.btn};\n    transition: color 250ms;\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n`;\n","import * as yup from 'yup';\n\nexport const validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .matches(\n            /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/,\n            {\n                message:\n                    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n                test: value => {\n                    return /^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .nullable(true)\n        .transform((value, startValue) =>\n            startValue.trim() === '' ? null : value\n        )\n        .required(\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        ),\n    number: yup\n        .string()\n        .matches(\n            /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            {\n                message:\n                    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n                test: value => {\n                    return /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(\n                        value\n                    );\n                },\n            }\n        )\n        .required(\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        ),\n});\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    font-size: ${props => props.theme.fontSizes.medium};\n    transition: color 250ms;\n    & svg {\n        transition: fill 250ms;\n    }\n    &:hover,\n    &:focus {\n        color: ${props => props.theme.colors.hover};\n    }\n    &:hover svg,\n    &:focus svg {\n        fill: ${props => props.theme.colors.hover};\n    }\n\n    &:nth-of-type(5) {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n`;\n\nexport const Ico = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #404040;\n    width: 33px;\n    height: 33px;\n    padding: 5px;\n`;\n\nexport const Input = styled(Field)`\n    flex-grow: 1;\n    display: block;\n    margin: 0;\n    padding: 5px 33px 5px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    font-size: 18px;\n`;\n\nexport const Message = styled.span`\n    font-size: ${props => props.theme.fontSizes.small};\n`;\n","import { Svg } from 'components/icon/Icon';\nimport { Ico, Input, InputWrapper, Label, Message } from './FormItem.styled';\nimport { ErrorMessage } from 'formik';\nimport sprite from '../../img/icons.svg';\nimport { toCapitalize } from 'services/tocapitalize';\n\nexport const FormItem = ({ name, type, onChange, use }) => {\n    let normalName = name;\n    if (name === 'email') normalName = 'e-mail';\n    const ph = `Enter ${normalName}`;\n    return (\n        <Label>\n            {toCapitalize(normalName)}\n            <InputWrapper>\n                <Ico>\n                    <Svg w={23} h={23} use={`${sprite}#icon-${use}`} />\n                </Ico>\n                <Input\n                    type={type}\n                    name={name}\n                    placeholder={ph}\n                    onChange={onChange}\n                />\n            </InputWrapper>\n            <ErrorMessage name={name}>\n                {msg => <Message>{msg}</Message>}\n            </ErrorMessage>\n        </Label>\n    );\n};\n","export const toCapitalize = str => {\n    const firstLetter = str.charAt(0).toUpperCase();\n    const remainingLetters = str.slice(1);\n    const capitalized = firstLetter + remainingLetters;\n    return capitalized;\n};\n","import {\n    FormikForm,\n    SubmitButton,\n    PhotoLabel,\n    BtnClose,\n    IconEdit,\n} from './ContactForm.styled';\nimport { Formik } from 'formik';\nimport { validationSchema } from 'services/validate-schema';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { selectContacts } from 'store/selector';\nimport sprite from '../../img/icons.svg';\nimport { Svg } from 'components/icon/Icon';\nimport defaultPhoto from '../../img/avatar-default.png';\nimport { FormItem } from 'components/FormItem/FormItem';\nimport { useNavigate } from 'react-router-dom';\nimport { hendleAddContact } from 'store/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n    const contacts = useSelector(selectContacts);\n    const navigate = useNavigate();\n\n    const dispatch = useDispatch();\n\n    const hendleSetState = values => {\n        dispatch(hendleAddContact(values));\n    };\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            initialValues={{\n                name: '',\n                number: '',\n            }}\n            onSubmit={(values, { resetForm }) => {\n                const isNameExist = contacts.find(\n                    val => val.name.toLowerCase() === values.name.toLowerCase()\n                );\n                const isNumberExist = contacts.find(\n                    val => val.number === values.number\n                );\n                if (isNameExist) {\n                    toast(`${values.name} is already in contacts.`);\n                    return;\n                }\n                if (isNumberExist) {\n                    toast(\n                        `${values.number} is already in contacts as ${isNumberExist.name}.`\n                    );\n                    return;\n                }\n                hendleSetState(values);\n                resetForm();\n                navigate('/');\n            }}\n        >\n            {({ handleSubmit, handleChange }) => {\n                return (\n                    <>\n                        <FormikForm onSubmit={handleSubmit}>\n                            <BtnClose to={'/'}>\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-close`}\n                                />\n                            </BtnClose>\n                            <PhotoLabel htmlFor={'img'} file={defaultPhoto}>\n                                <IconEdit>\n                                    <Svg\n                                        w={20}\n                                        h={20}\n                                        use={`${sprite}#icon-pencil`}\n                                    />\n                                </IconEdit>\n                            </PhotoLabel>\n                            <FormItem\n                                type=\"text\"\n                                name=\"name\"\n                                use=\"contact\"\n                                onChange={handleChange}\n                            />\n                            <FormItem\n                                type=\"tel\"\n                                name=\"number\"\n                                use=\"phone\"\n                                onChange={handleChange}\n                            />\n                            <SubmitButton type=\"submit\">\n                                <Svg\n                                    w={20}\n                                    h={20}\n                                    use={`${sprite}#icon-save-contact`}\n                                />\n                                Add contact\n                            </SubmitButton>\n                        </FormikForm>\n                    </>\n                );\n            }}\n        </Formik>\n    );\n};\n","import { Container, Section } from 'components/App.styled';\nimport { ContactForm } from 'components/Contact-form/ContactForm';\n\nconst New = () => {\n    return (\n        <Section>\n            <Container>\n                <ContactForm />\n            </Container>\n        </Section>\n    );\n};\n\nexport default New;\n"],"names":["FormikForm","styled","Form","BtnClose","LinkStyled","PhotoLabel","props","file","theme","colors","hover","IconEdit","mainBackground","SubmitButton","btn","validationSchema","yup","shape","name","matches","message","test","value","nullable","transform","startValue","trim","required","number","Label","fontSizes","medium","InputWrapper","Ico","Input","Field","Message","small","FormItem","type","onChange","use","normalName","str","ph","charAt","toUpperCase","slice","w","h","sprite","placeholder","msg","ContactForm","contacts","useSelector","selectContacts","navigate","useNavigate","dispatch","useDispatch","initialValues","onSubmit","values","resetForm","isNameExist","find","val","toLowerCase","isNumberExist","toast","hendleAddContact","hendleSetState","handleSubmit","handleChange","to","htmlFor","defaultPhoto"],"sourceRoot":""}